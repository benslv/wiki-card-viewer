{"version":3,"sources":["apiQuery.js","WikiItem.js","App.js","serviceWorker.js","index.js"],"names":["_callee","searchTerm","url","response","data","results","regenerator_default","a","wrap","_context","prev","next","fetch","sent","json","formatResponse","appendImages","abrupt","stop","i","length","element","title","description","link","imgUrl","push","_callee2","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_iterator","_step","thumbUrl","_context2","undefined","Symbol","iterator","done","value","query","pages","thumbnail","source","e","console","log","t0","return","finish","WikiItem","props","react_default","createElement","Card","className","href","Img","variant","src","Body","Title","Text","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","handleChange","bind","assertThisInitialized","queryAPI","_this2","api","then","result","setState","event","defineProperty","target","name","forEach","items","map","item","src_WikiItem","Container","Row","Col","type","placeholder","onChange","onClick","CardColumns","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.42a17fc2.chunk.js","sourcesContent":["// const fetch = require(\"node-fetch\");\r\n\r\nasync function searchWiki(searchTerm) {\r\n\tlet url =\r\n\t\t\"https://en.wikipedia.org/w/api.php?action=opensearch&format=json&search=\" +\r\n\t\tsearchTerm +\r\n\t\t\"&origin=*\"; // We send an unauthenticated CORS request thingy\r\n\r\n\tconst response = await fetch(url);\r\n\tconst data = await response.json();\r\n\tlet results = await formatResponse(data);\r\n\tresults = await appendImages(results);\r\n\r\n\treturn results;\r\n}\r\n\r\nfunction formatResponse(data) {\r\n\tlet results = [];\r\n\tfor (let i = 0; i < data[1].length; i++) {\r\n\t\tlet element = {\r\n\t\t\ttitle: data[1][i],\r\n\t\t\tdescription: data[2][i],\r\n\t\t\tlink: data[3][i],\r\n\t\t\timgUrl: \"\"\r\n\t\t};\r\n\r\n\t\tresults.push(element);\r\n\t}\r\n\treturn results;\r\n}\r\n\r\nasync function appendImages(results) {\r\n\tfor (let element of results) {\r\n\t\tlet url =\r\n\t\t\t\"https://en.wikipedia.org/w/api.php?action=query&format=json&formatversion=2&prop=pageimages&pithumbsize=500&titles=\" +\r\n\t\t\telement.title +\r\n\t\t\t\"&origin=*\";\r\n\r\n\t\tconst response = await fetch(url);\r\n\t\tconst data = await response.json();\r\n\t\tlet thumbUrl;\r\n\r\n\t\ttry {\r\n\t\t\tthumbUrl = data.query.pages[0].thumbnail.source;\r\n\t\t} catch (e) {\r\n\t\t\tconsole.log(\"Thumbnail not found. Appended default instead.\");\r\n\t\t\tthumbUrl =\r\n\t\t\t\t\"https://upload.wikimedia.org/wikipedia/en/thumb/8/80/Wikipedia-logo-v2.svg/500px-Wikipedia-logo-v2.svg.png\";\r\n\t\t}\r\n\r\n\t\telement.imgUrl = thumbUrl;\r\n\t}\r\n\r\n\treturn results;\r\n}\r\n\r\nexport { searchWiki, formatResponse, appendImages };\r\n","import React from \"react\";\r\nimport { Card } from \"react-bootstrap\";\r\nimport \"./WikiItem.css\";\r\n\r\nfunction WikiItem(props) {\r\n\tlet defaultImg =\r\n\t\t\"https://upload.wikimedia.org/wikipedia/en/thumb/8/80/Wikipedia-logo-v2.svg/500px-Wikipedia-logo-v2.svg.png\";\r\n\r\n\treturn (\r\n\t\t<Card className=\"border-0 shadow-sm m-3 custom-card animated fadeUpIn\">\r\n\t\t\t<a\r\n\t\t\t\tclassName=\"stretched-link text-decoration-none text-dark\"\r\n\t\t\t\thref={props.link}>\r\n\t\t\t\t<Card.Img\r\n\t\t\t\t\tvariant={\"top\"}\r\n\t\t\t\t\t// Add top and left/right padding to the image if it's the default one.\r\n\t\t\t\t\t// Purely aesthetic reasons.\r\n\t\t\t\t\tclassName={props.imgUrl == defaultImg ? \"pt-4 px-3\" : \"\"}\r\n\t\t\t\t\tsrc={props.imgUrl}\r\n\t\t\t\t/>\r\n\t\t\t\t<Card.Body>\r\n\t\t\t\t\t<Card.Title>{props.title}</Card.Title>\r\n\t\t\t\t\t<Card.Text>{props.description}</Card.Text>\r\n\t\t\t\t</Card.Body>\r\n\t\t\t</a>\r\n\t\t</Card>\r\n\t);\r\n}\r\n\r\nexport default WikiItem;\r\n","import React from \"react\";\nimport * as api from \"./apiQuery.js\";\nimport WikiItem from \"./WikiItem.js\";\nimport { Container, Row, Col, CardColumns } from \"react-bootstrap\";\nimport \"./App.css\";\n\nclass App extends React.Component {\n\tconstructor() {\n\t\tsuper();\n\n\t\tthis.state = {\n\t\t\tdata: [],\n\t\t\tsearchTerm: \"\"\n\t\t};\n\n\t\tthis.handleChange = this.handleChange.bind(this);\n\t\tthis.queryAPI = this.queryAPI.bind(this);\n\t}\n\n\tqueryAPI() {\n\t\tif (!this.state.searchTerm == \"\") {\n\t\t\tconsole.log(this.state.searchTerm);\n\t\t\tapi.searchWiki(this.state.searchTerm).then(result => {\n\t\t\t\t// result = JSON.stringify(result);\n\t\t\t\tthis.setState({\n\t\t\t\t\tdata: result\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\t}\n\n\thandleChange(event) {\n\t\tthis.setState({\n\t\t\t[event.target.name]: event.target.value\n\t\t});\n\t}\n\n\trender() {\n\t\tthis.state.data.forEach(element => {\n\t\t\tconsole.log(element);\n\t\t});\n\n\t\tconst items = this.state.data.map(item => (\n\t\t\t<WikiItem\n\t\t\t\ttitle={item.title}\n\t\t\t\tdescription={item.description}\n\t\t\t\tlink={item.link}\n\t\t\t\timgUrl={item.imgUrl}\n\t\t\t/>\n\t\t));\n\n\t\treturn (\n\t\t\t<div className=\"bg-light fullscreen py-5 d-flex align-items-center\">\n\t\t\t\t<Container className=\"text-center\">\n\t\t\t\t\t<Row>\n\t\t\t\t\t\t<Col>\n\t\t\t\t\t\t\t<h1 className=\"display-1\">WikiCards</h1>\n\t\t\t\t\t\t\t<p className=\"lead\">Search for something!</p>\n\t\t\t\t\t\t\t<div className=\"my-5 d-flex justify-content-center\">\n\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\tname=\"searchTerm\"\n\t\t\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\t\t\tclassName=\"bg-white form-control-plaintext shadow p-3 text-dark text-left rounded-pill-left border-0 w-75 search-bar\"\n\t\t\t\t\t\t\t\t\tplaceholder=\"Type here...\"\n\t\t\t\t\t\t\t\t\tonChange={this.handleChange}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\tclassName=\"border-0 btn p-3 search-button shadow rounded-pill-right d-flex align-items-center justify-content-center\"\n\t\t\t\t\t\t\t\t\tonClick={this.queryAPI}>\n\t\t\t\t\t\t\t\t\t<i className=\"material-icons\">search</i>\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<CardColumns>{items}</CardColumns>\n\t\t\t\t\t\t</Col>\n\t\t\t\t\t</Row>\n\t\t\t\t</Container>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}